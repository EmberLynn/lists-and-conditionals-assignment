{"version":3,"sources":["Validation/Validation.js","CharOutput/CharOutput.js","App.js","serviceWorker.js","index.js"],"names":["validation","props","message","textLength","charOutput","className","onClick","delete","character","App","state","inputString","stringLength","charsArray","textChangeListener","event","target","value","length","split","setState","deleteChar","charIndex","chars","splice","join","this","map","char","index","type","onChange","Validation","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"mVAiBeA,G,MAdI,SAACC,GAChB,IAAIC,EAAU,KAQd,OANIA,EADDD,EAAME,WAAa,EACR,mBAGA,uBAIV,2BAAID,KCAGE,G,MARI,SAACH,GAChB,OACI,yBAAKI,UAAU,OAAOC,QAASL,EAAMM,QACjC,2BAAIN,EAAMO,cCmEPC,E,4MArEbC,MAAQ,CACNC,YAAa,GACbC,aAAc,EACdC,WAAY,I,EAKdC,mBAAqB,SAACC,GACpB,IAAMJ,EAAcI,EAAMC,OAAOC,MAC3BL,EAAeD,EAAYO,OAC3BL,EAAaF,EAAYQ,MAAM,IACrC,EAAKC,SACH,CACER,aAAcA,EACdD,YAAaA,EACbE,WAAYA,K,EAMlBQ,WAAa,SAACC,GACZ,IAAMC,EAAK,YAAO,EAAKb,MAAMG,YAC7BU,EAAMC,OAAOF,EAAW,GACxB,IAAMX,EAAcY,EAAME,KAAK,IACzBb,EAAeD,EAAYO,OACjC,EAAKE,SACH,CACEP,WAAYU,EACZZ,YAAaA,EACbC,aAAcA,K,uDAKX,IAAD,OAGFW,EAAQ,KAkBZ,OAhB4B,MAAzBG,KAAKhB,MAAMG,aAEdU,EACI,6BACGG,KAAKhB,MAAMG,WAAWc,KAAI,SAACC,EAAMC,GAChC,OAAO,kBAAC,EAAD,CACPrB,UAAWoB,EACXrB,OAAQ,kBAAM,EAAKc,WAAWQ,WAUpC,yBAAKxB,UAAU,OACb,2BAAOyB,KAAK,OAAOC,SAAUL,KAAKZ,mBAAoBG,MAAOS,KAAKhB,MAAMC,cACvEY,EACD,2BAAIG,KAAKhB,MAAME,cACf,kBAACoB,EAAD,CAAY7B,WAAYuB,KAAKhB,MAAME,oB,GA/DzBqB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMjD,c","file":"static/js/main.410bccb5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//takes the stringLength passed to it from App.js and checks for length then displays a message\r\nconst validation = (props) => {\r\n    let message = null;\r\n    if(props.textLength > 8){\r\n        message = 'Text long enough';\r\n    }\r\n    else {\r\n        message = 'Text not long enough';\r\n    }\r\n\r\n    return (\r\n        <p>{message}</p>\r\n    )\r\n}\r\n\r\nexport default validation;","import React from 'react'\r\nimport './CharOutput.css'\r\n\r\n//a clickable component for each character in the array\r\n//deleteChar is called when component is clicked\r\nconst charOutput = (props) => {\r\n    return (\r\n        <div className=\"Char\" onClick={props.delete}>\r\n            <p>{props.character}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default charOutput;","import React, { Component } from 'react';\nimport './App.css';\nimport Validation from './Validation/Validation';\nimport CharOutput from './CharOutput/CharOutput';\n\nclass App extends Component {\n  state = {\n    inputString: '',\n    stringLength: 0,\n    charsArray: []\n  }\n\n  //takes the user input and creates an array of those characters\n  //also sets string length for displaying and validation\n  textChangeListener = (event) => {\n    const inputString = event.target.value;\n    const stringLength = inputString.length;\n    const charsArray = inputString.split('')\n    this.setState(\n      {\n        stringLength: stringLength,\n        inputString: inputString, \n        charsArray: charsArray\n      }\n      )\n  }\n\n  //deletes a character component when it is clicked and updates the string the user input\n  deleteChar = (charIndex) => {\n    const chars = [...this.state.charsArray];\n    chars.splice(charIndex, 1);\n    const inputString = chars.join('');\n    const stringLength = inputString.length;\n    this.setState(\n      {\n        charsArray: chars,\n        inputString: inputString,\n        stringLength: stringLength\n      }\n      )\n  }\n\n  render(){\n\n    //chars holds each component to be displayed\n    let chars = null;\n    //make sure array isn't empty or else an exception will be thrown\n    if(this.state.charsArray != null){\n    //for each character in the array, give it a clickable component\n    chars = (\n        <div>\n          {this.state.charsArray.map((char, index) => {\n            return <CharOutput \n            character={char}\n            delete={() => this.deleteChar(index)}\n            />\n        })}\n        </div>\n    );\n    }\n    \n    //display the page and all of its components\n    //input box reflects changes when a character is deleted from the string/array\n    return (\n      <div className='App'>\n        <input type='text' onChange={this.textChangeListener} value={this.state.inputString}></input>\n        {chars}\n        <p>{this.state.stringLength}</p>\n        <Validation textLength={this.state.stringLength}/>\n      </div>\n      );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}